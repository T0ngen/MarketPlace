// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
)

const createGoods = `-- name: CreateGoods :one
INSERT INTO goods (
    seller_id, title, price, description, image, category, rating,
    discount, status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, seller_id, title, price, description, image, category, rating, discount, status, created_at
`

type CreateGoodsParams struct {
	SellerID    int64  `json:"seller_id"`
	Title       string `json:"title"`
	Price       int64  `json:"price"`
	Description string `json:"description"`
	Image       string `json:"image"`
	Category    string `json:"category"`
	Rating      string `json:"rating"`
	Discount    int64  `json:"discount"`
	Status      string `json:"status"`
}

func (q *Queries) CreateGoods(ctx context.Context, arg CreateGoodsParams) (Good, error) {
	row := q.db.QueryRowContext(ctx, createGoods,
		arg.SellerID,
		arg.Title,
		arg.Price,
		arg.Description,
		arg.Image,
		arg.Category,
		arg.Rating,
		arg.Discount,
		arg.Status,
	)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.SellerID,
		&i.Title,
		&i.Price,
		&i.Description,
		&i.Image,
		&i.Category,
		&i.Rating,
		&i.Discount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGoodsById = `-- name: DeleteGoodsById :exec
DELETE FROM goods
WHERE id = $1
`

func (q *Queries) DeleteGoodsById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGoodsById, id)
	return err
}

const getGoodsByTitleOLD = `-- name: GetGoodsByTitleOLD :many
SELECT id, seller_id, title, price, description, image, category, rating, discount, status, created_at FROM goods
WHERE title ILIKE $1
`

func (q *Queries) GetGoodsByTitleOLD(ctx context.Context, title string) ([]Good, error) {
	rows, err := q.db.QueryContext(ctx, getGoodsByTitleOLD, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Good
	for rows.Next() {
		var i Good
		if err := rows.Scan(
			&i.ID,
			&i.SellerID,
			&i.Title,
			&i.Price,
			&i.Description,
			&i.Image,
			&i.Category,
			&i.Rating,
			&i.Discount,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
